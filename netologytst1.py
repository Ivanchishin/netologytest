import pytest

# Первое ДЗ Наводим порядок: упорядочиваем курсы по продолжительности
def courses():
    courses = ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля", "Frontend-разработчик с нуля"]
    mentors = [
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]
    durations = [14, 20, 12, 20]

    courses_list = []
    for course, mentor, duration in zip(courses, mentors, durations):
        course_dict = {"title":course, "mentors":mentor, "duration":duration}
        courses_list.append(course_dict)

    durations_dict = {}

    # Допишите код цикла так, чтобы в нём вы получали id курса. Подсказка: помните о функции enumerate
    for id, course1 in enumerate(courses_list):
        key = durations[id]
        durations_dict.setdefault(key, [])
        durations_dict[key].append(id)
    # Получите значение из ключа duration
        # Допишите код ниже, который добавляет в словарь durations_dict по ключу key значения — id
        #durations_dict.update({key:id})
    resultstring = ''
    # Отсортируем словарь по ключам. Этот код уже готов, ничего менять не нужно
    # Здесь мы получаем пары ключ-значение в виде кортежа, и функция sorted выполняет сортировку по первым значениям кортежа — ключам
    durations_dict = dict(sorted(durations_dict.items()))
    # Выведите курсы, отсортированные по длительности
    # Допишите код цикла так, чтобы в нём вы получали из durations_dict ключи и значения
    for a, b in durations_dict.items():
        for d,c in enumerate(b):
        # Допишите код, который проходит по всему списку значений и выводит на экран текст вида «название курса — длительность»
            print(f'{courses_list[b[d]]["title"]} - {a} месяцев')
            resultstring += f'{courses_list[b[d]]["title"]} - {a} месяцев\n'
    return resultstring




#Проверяем, что все курсы есть в ответе
@pytest.mark.parametrize("expected", ['Python', 'Java', 'Fullstack','Frontend'])
def test1(expected):
    assert expected in courses()

#Проверяем, что месяца верно подсчитаны
@pytest.mark.parametrize("expected", ['12', '14', '20'])
def test2(expected):
    assert expected in courses()

#Проверяем корректность значений
@pytest.mark.parametrize("expected", ['Python-разработчик с нуля - 12 месяцев',
                                      'Java-разработчик с нуля - 14 месяцев',
                                      'Fullstack-разработчик на Python - 20 месяцев',
                                      'Frontend-разработчик с нуля - 20 месяцев'])
def test3(expected):
    res = courses().split('\n')
    res.pop(4)
    assert expected in res

# Второе ДЗ, палиндромы
def solve(phrases: list):
    result = [] # список палиндромов
    for phrase in phrases: # пройдите циклом по всем фразам
        phrase2 = phrase.replace(' ','') # сохраните фразу без пробелов
        if phrase2 == phrase2[::-1]: # сравните фразу с ней же, развернутой наоборот (через [::-1])
           result.append(phrase)
    return result

#Проверяем, что слова являются палиндромами
@pytest.mark.parametrize("phrases, expected", [
    (["нажал кабан на баклажан", "дом как комод", "рвал дед лавр",
      "азот калий и лактоза", "а собака боса", "тонет енот",
      "карман мрак", "пуст суп"],
     ["нажал кабан на баклажан", "рвал дед лавр",
      "азот калий и лактоза", "а собака боса", "тонет енот", "пуст суп"]),
])
def test4(phrases, expected):
    assert solve(phrases) == expected

#Третье ДЗ, топ 3 имён
def top3(courses, mentors):


    all_list = []

    for m in mentors:
        for n in m:
            n= n.split()
            all_list.append(n[0])

    unique_names = sorted(set(all_list))

    # Подсчитайте встречаемость каждого имени через list.count()
    popular = []
    for name in unique_names:
        popular.append([name,all_list.count(name)]) # Добавьте подсчёт имён

    # Это код для сортировки списка с элементами вида [имя, количество] по убыванию встречаемости
    # Используйте его, как есть, или напишите собственный :)
    popular.sort(key=lambda x:x[1], reverse=True)

    # Получите топ-3 часто встречающихся имён из списка popular
    # Подсказка: возьмите срез списка
    top_3 = popular[:3]
    popular = []
    for name in unique_names:
        popular.append([name,all_list.count(name)]) # Добавьте подсчёт имён

    # Это код для сортировки списка с элементами вида [имя, количество] по убыванию встречаемости
    # Используйте его, как есть, или напишите собственный :)
    popular.sort(key=lambda x:x[1], reverse=True)

    # Получите топ-3 часто встречающихся имён из списка popular
    # Подсказка: возьмите срез списка
    top_3 = popular[:3]
    print (f'{top_3[0][0]}: {top_3[0][1]} раз(а), {top_3[1][0]}: {top_3[1][1]} раз(а), {top_3[2][0]}: {top_3[2][1]} раз(а)')
    topres = f'{top_3[0][0]}: {top_3[0][1]} раз(а), {top_3[1][0]}: {top_3[1][1]} раз(а), {top_3[2][0]}: {top_3[2][1]} раз(а)'
    return topres

#Проверяем корректность результата
@pytest.mark.parametrize("expected1, expected2",
                         [('Александр: 10 раз(а), Евгений: 5 раз(а), Максим: 4 раз(а)',
                                                  'Александр: 8 раз(а), Евгений: 3 раз(а), Иван: 2 раз(а)')])
def test5(expected1,expected2):
    courses1 = ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python",
               "Frontend-разработчик с нуля"]

    mentors1 = [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
         "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина",
         "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев",
         "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский",
         "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов",
         "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский",
         "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая",
         "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин",
         "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]
    courses2 = ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python",
                "Frontend-разработчик с нуля"]

    mentors2 = [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
         "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев",
         "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский",
         "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин"]
    ]
    assert top3(courses1,mentors1) == expected1
    assert top3(courses2, mentors2) == expected2


